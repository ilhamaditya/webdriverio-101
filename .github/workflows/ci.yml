name: WebdriverIO CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        attempt: [1, 2, 3]  # Retry job up to 3 times

    services:
      docker:
        image: docker:latest
        options: --privileged --add-host=host.docker.internal:host-gateway
        ports:
          - 4444:4444
          - 8080:8080
          - 5050:5050
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Prepare Allure Results Directory
        run: mkdir -p allure-results && touch allure-results/executor.json

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Stop and Remove Existing Containers
        run: docker-compose down --volumes --remove-orphans

      - name: Start Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Wait for Selenoid Health
        run: |
          attempts=30
          until curl -sSf http://localhost:4444/status | grep '"ready":true' > /dev/null || [ $attempts -eq 0 ]; do
            echo "Waiting for Selenoid to be ready..."
            sleep 5
            ((attempts--))
          done
          if [ $attempts -eq 0 ]; then
            echo "Selenoid did not become ready!"
            exit 1
          fi

      - name: Run Tests
        env:
          WEB_URL: ${{ secrets.WEB_URL }}
          WEB_USERNAME: ${{ secrets.WEB_USERNAME }}
          WEB_PASSWORD: ${{ secrets.WEB_PASSWORD }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: npm run dock

      - name: Notify Slack
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Test workflow completed. Check Allure results for details!"}' \
          $SLACK_WEBHOOK

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_id }}
          path: allure-results/

      - name: Clean Up Docker Containers
        if: always()
        run: docker-compose down --volumes --remove-orphans